/**
 * GUARDI√ÉO DA √ÅGUA - QUEST SYSTEM
 * Sistema de miss√µes educacionais e progress√£o
 */

class QuestSystem {
    constructor(gameManager) {
        console.log('üéØ Inicializando QuestSystem...');
        
        this.gameManager = gameManager;
        
        // Miss√µes
        this.quests = new Map();
        this.activeQuests = new Set();
        this.completedQuests = new Set();
        this.currentMainQuest = null;
        
        // Progresso
        this.questCounter = 0;
        this.totalScore = 0;
        this.achievements = new Set();

        // Configura√ß√µes
        this.maxActiveQuests = 3;

        // ===== ENHANCED MISSION SYSTEM =====
        // Mission chains for connected storylines
        this.missionChains = new Map();
        this.activeChains = new Set();

        // Player choices and consequences
        this.playerChoices = new Map();
        this.reputation = {
            citizens: 50,      // Citizen satisfaction with decisions
            environment: 50,   // Environmental groups approval
            business: 50,      // Business community support
            government: 50     // Government/regulatory approval
        };

        // Dynamic mission state
        this.seasonalEvents = new Map();
        this.emergencyEvents = new Set();
        this.missionNotifications = [];

        // Enhanced timing system
        this.urgentMissions = new Set();
        this.timeWindowMissions = new Map();

        // ===== SIMPLIFIED MISSION CATEGORIES - ONLY 2 PRIMARY CATEGORIES =====
        this.missionCategories = {
            primary: {
                name: 'Miss√µes Prim√°rias',
                description: 'Atividades essenciais para o progresso do jogo',
                icon: 'üéØ',
                color: '#00ff88'
            },
            secondary: {
                name: 'Miss√µes Secund√°rias',
                description: 'Conte√∫do educacional opcional e desafios extras',
                icon: 'üìö',
                color: '#4a9eff'
            }
        };

        // ===== SIMPLIFIED MISSION INTERFACE =====
        // Note: Old detailed categories have been simplified to just 'primary' and 'secondary'
        // for better user experience and reduced complexity

        this.missionUI = {
            isOpen: false,
            currentCategory: 'primary',
            selectedMission: null
        };

        this.initializeQuests();
        
        console.log('‚úÖ QuestSystem inicializado');

        // ===== GLOBAL DEBUG FUNCTIONS =====
        if (typeof window !== 'undefined') {
            window.validateMission = (missionId) => this.validateMissionCompletion(missionId);
            window.forceCompleteMission = (missionId) => this.forceCompleteMission(missionId);
            window.listActiveMissions = () => {
                console.log('üéØ Active Missions:');
                this.activeQuests.forEach(questId => {
                    const quest = this.quests.get(questId);
                    if (quest) {
                        console.log(`  - ${quest.title} (${questId}): ${Math.round(quest.progress * 100)}%`);
                    }
                });
            };
            window.listAllMissions = () => {
                console.log('üìã All Missions:');
                this.quests.forEach((quest, questId) => {
                    const status = this.completedQuests.has(questId) ? 'Completed' :
                                  this.activeQuests.has(questId) ? 'Active' : 'Available';
                    console.log(`  - ${quest.title} (${questId}): ${status}`);
                });
            };
            console.log('üß™ Mission debug functions available: validateMission(), forceCompleteMission(), listActiveMissions(), listAllMissions()');
        }
    }
    
    // ===== INICIALIZA√á√ÉO =====
    initializeQuests() {
        console.log('üéØ Definindo miss√µes educacionais...');
        
        // ===== MISS√ïES PRINCIPAIS (PRIMARY) =====
        this.addQuest('tutorial_01', {
            title: 'Bem-vindo, Guardi√£o!',
            description: 'Construa sua primeira bomba de √°gua para come√ßar a fornecer √°gua √† popula√ß√£o.',
            type: 'primary',
            category: 'primary',
            difficulty: 'beginner',
            estimatedTime: '5 minutos',
            prerequisites: [],
            objectives: [
                {
                    id: 'build_water_pump',
                    description: 'Construir 1 Bomba de √Ågua',
                    type: 'build',
                    target: 'water_pump',
                    current: 0,
                    required: 1
                }
            ],
            rewards: {
                score: 100,
                budget: 2000,
                unlock: ['water_well'],
                experience: 50
            },
            educationalContent: {
                concepts: ['recursos h√≠dricos', '√°gua subterr√¢nea', 'aqu√≠feros'],
                facts: [
                    'Uma bomba de √°gua pode extrair at√© 50 litros por segundo de fontes subterr√¢neas.',
                    '√â importante monitorar o n√≠vel dos aqu√≠feros para evitar esgotamento.',
                    'Aqu√≠feros s√£o forma√ß√µes geol√≥gicas que armazenam √°gua subterr√¢nea.'
                ],
                tips: [
                    'Posicione bombas longe de fontes de polui√ß√£o.',
                    'Diversifique suas fontes de √°gua para maior seguran√ßa.',
                    'Monitore a qualidade da √°gua regularmente.'
                ]
            }
        });
        
        this.addQuest('tutorial_02', {
            title: 'Tratando a Polui√ß√£o',
            description: 'A polui√ß√£o est√° afetando a qualidade da √°gua. Construa uma esta√ß√£o de tratamento.',
            type: 'tutorial',
            category: 'secondary',
            objectives: [
                {
                    id: 'build_treatment',
                    description: 'Construir 1 Esta√ß√£o de Tratamento',
                    type: 'build',
                    target: 'treatment_plant',
                    current: 0,
                    required: 1
                },
                {
                    id: 'reduce_pollution',
                    description: 'Reduzir polui√ß√£o para menos de 30%',
                    type: 'resource',
                    target: 'pollution',
                    current: 0,
                    required: 30,
                    comparison: 'less'
                }
            ],
            rewards: {
                score: 200,
                budget: 3000,
                unlock: ['filter_station']
            },
            educationalContent: {
                facts: [
                    'Esta√ß√µes de tratamento removem contaminantes qu√≠micos e biol√≥gicos da √°gua.',
                    'O tratamento adequado pode reduzir doen√ßas transmitidas pela √°gua em 90%.'
                ],
                tips: [
                    'Trate a √°gua na fonte sempre que poss√≠vel.',
                    'Monitore regularmente a qualidade da √°gua tratada.'
                ]
            }
        });
        
        this.addQuest('tutorial_03', {
            title: 'Armazenamento Estrat√©gico',
            description: 'Construa reservat√≥rios para garantir fornecimento constante de √°gua.',
            type: 'tutorial',
            category: 'secondary',
            objectives: [
                {
                    id: 'build_storage',
                    description: 'Construir 2 Reservat√≥rios',
                    type: 'build',
                    target: 'water_tank',
                    current: 0,
                    required: 2
                },
                {
                    id: 'water_reserve',
                    description: 'Manter reserva de √°gua acima de 1500L',
                    type: 'resource',
                    target: 'water',
                    current: 0,
                    required: 1500,
                    comparison: 'greater'
                }
            ],
            rewards: {
                score: 150,
                budget: 2500,
                unlock: ['water_tower']
            },
            educationalContent: {
                facts: [
                    'Reservat√≥rios permitem armazenar √°gua para per√≠odos de escassez.',
                    'Uma reserva estrat√©gica deve cobrir pelo menos 3 dias de consumo.'
                ],
                tips: [
                    'Posicione reservat√≥rios em pontos altos para melhor distribui√ß√£o.',
                    'Mantenha reservat√≥rios limpos para evitar contamina√ß√£o.'
                ]
            }
        });
        
        // MISS√ïES PRINCIPAIS
        this.addQuest('main_01', {
            title: 'Cidade Sustent√°vel',
            description: 'Desenvolva uma infraestrutura h√≠drica sustent√°vel para sua cidade.',
            type: 'main',
            category: 'primary',
            objectives: [
                {
                    id: 'population_growth',
                    description: 'Alcan√ßar popula√ß√£o de 800 habitantes',
                    type: 'resource',
                    target: 'population',
                    current: 0,
                    required: 800,
                    comparison: 'greater'
                },
                {
                    id: 'satisfaction_high',
                    description: 'Manter satisfa√ß√£o acima de 80% por 5 minutos',
                    type: 'sustained',
                    target: 'satisfaction',
                    current: 0,
                    required: 300, // 5 minutos em segundos
                    threshold: 80
                },
                {
                    id: 'pollution_low',
                    description: 'Manter polui√ß√£o abaixo de 20%',
                    type: 'resource',
                    target: 'pollution',
                    current: 0,
                    required: 20,
                    comparison: 'less'
                }
            ],
            rewards: {
                score: 500,
                budget: 10000,
                unlock: ['desalination_plant'],
                achievement: 'sustainable_city'
            },
            educationalContent: {
                facts: [
                    'Cidades sustent√°veis equilibram crescimento econ√¥mico com prote√ß√£o ambiental.',
                    'O acesso √† √°gua limpa √© um direito humano fundamental.'
                ],
                tips: [
                    'Invista em tecnologias limpas para reduzir a polui√ß√£o.',
                    'Eduque a popula√ß√£o sobre conserva√ß√£o da √°gua.'
                ]
            }
        });
        
        // MISS√ïES DE DESAFIO
        this.addQuest('challenge_01', {
            title: 'Crise H√≠drica',
            description: 'Supere uma crise de escassez de √°gua mantendo a cidade funcionando.',
            type: 'challenge',
            category: 'secondary',
            timeLimit: 600, // 10 minutos
            objectives: [
                {
                    id: 'survive_drought',
                    description: 'Sobreviver √† seca por 10 minutos',
                    type: 'survival',
                    target: 'time',
                    current: 0,
                    required: 600
                },
                {
                    id: 'no_water_shortage',
                    description: 'N√£o deixar a √°gua acabar',
                    type: 'avoid',
                    target: 'water_shortage',
                    current: 0,
                    required: 0
                }
            ],
            rewards: {
                score: 300,
                budget: 5000,
                achievement: 'crisis_manager'
            },
            educationalContent: {
                facts: [
                    'Secas podem durar meses ou anos, exigindo planejamento a longo prazo.',
                    'Racionamento inteligente pode estender reservas por muito mais tempo.'
                ],
                tips: [
                    'Implemente medidas de conserva√ß√£o antes da crise.',
                    'Diversifique suas fontes de √°gua para maior resili√™ncia.'
                ]
            }
        });
        
        // ===== MISS√ïES SECUND√ÅRIAS EDUCACIONAIS =====

        // Ciclo Hidrol√≥gico
        this.addQuest('edu_hydrological_cycle', {
            title: 'Compreendendo o Ciclo Hidrol√≥gico',
            description: 'Aprenda sobre o ciclo da √°gua e sua import√¢ncia para o ecossistema.',
            type: 'secondary',
            category: 'secondary',
            difficulty: 'beginner',
            estimatedTime: '10 minutos',
            prerequisites: ['tutorial_01'],
            objectives: [
                {
                    id: 'observe_evaporation',
                    description: 'Observar a evapora√ß√£o em corpos d\'√°gua por 3 minutos',
                    type: 'observation',
                    target: 'water_evaporation',
                    current: 0,
                    required: 180
                },
                {
                    id: 'build_rain_garden',
                    description: 'Construir um jardim de chuva',
                    type: 'build',
                    target: 'rain_garden',
                    current: 0,
                    required: 1
                }
            ],
            rewards: {
                score: 150,
                budget: 1000,
                experience: 75
            },
            educationalContent: {
                concepts: ['ciclo hidrol√≥gico', 'evapora√ß√£o', 'precipita√ß√£o', 'infiltra√ß√£o'],
                facts: [
                    'O ciclo hidrol√≥gico √© o movimento cont√≠nuo da √°gua na Terra.',
                    'A evapora√ß√£o dos oceanos fornece 86% da precipita√ß√£o global.',
                    'Jardins de chuva ajudam na infiltra√ß√£o e reduzem o escoamento superficial.'
                ],
                tips: [
                    'Jardins de chuva devem ser posicionados em √°reas de drenagem natural.',
                    'Use plantas nativas que toleram tanto seca quanto encharcamento.',
                    'Mantenha uma profundidade de 15-20cm para m√°xima efici√™ncia.'
                ]
            }
        });

        // Bacia Hidrogr√°fica
        this.addQuest('edu_watershed_management', {
            title: 'Gest√£o de Bacia Hidrogr√°fica',
            description: 'Entenda como proteger e gerenciar uma bacia hidrogr√°fica urbana.',
            type: 'secondary',
            category: 'secondary',
            difficulty: 'intermediate',
            estimatedTime: '15 minutos',
            prerequisites: ['tutorial_01', 'edu_hydrological_cycle'],
            objectives: [
                {
                    id: 'protect_springs',
                    description: 'Proteger 2 nascentes com vegeta√ß√£o',
                    type: 'build',
                    target: 'spring_protection',
                    current: 0,
                    required: 2
                },
                {
                    id: 'create_riparian_forest',
                    description: 'Criar mata ciliar ao longo de rios',
                    type: 'build',
                    target: 'riparian_forest',
                    current: 0,
                    required: 100 // metros lineares
                },
                {
                    id: 'prevent_occupation',
                    description: 'Evitar ocupa√ß√£o desordenada em √°reas de preserva√ß√£o',
                    type: 'management',
                    target: 'prevent_illegal_occupation',
                    current: 0,
                    required: 1
                }
            ],
            rewards: {
                score: 300,
                budget: 5000,
                experience: 150,
                unlock: ['linear_park']
            },
            educationalContent: {
                concepts: ['bacia hidrogr√°fica', 'nascentes', 'mata ciliar', 'APP'],
                facts: [
                    'Uma bacia hidrogr√°fica √© a √°rea drenada por um rio principal e seus afluentes.',
                    'Mata ciliar protege os cursos d\'√°gua da eros√£o e sedimenta√ß√£o.',
                    'APPs (√Åreas de Preserva√ß√£o Permanente) s√£o essenciais para a qualidade da √°gua.',
                    'Ocupa√ß√£o desordenada pode causar assoreamento e polui√ß√£o dos rios.'
                ],
                tips: [
                    'Mantenha pelo menos 30m de mata ciliar em cada margem do rio.',
                    'Use esp√©cies nativas para restaura√ß√£o da mata ciliar.',
                    'Implemente fiscaliza√ß√£o para evitar ocupa√ß√µes irregulares.',
                    'Crie parques lineares para proteger e valorizar os rios urbanos.'
                ]
            }
        });

        // ===== MISS√ïES DE GEST√ÉO DE CRISES =====

        // Contamina√ß√£o de √Ågua Subterr√¢nea
        this.addQuest('crisis_groundwater_contamination', {
            title: 'Crise: √Ågua Subterr√¢nea Contaminada',
            description: 'Responda a uma emerg√™ncia de contamina√ß√£o da √°gua subterr√¢nea por nitratos e coliformes fecais.',
            type: 'secondary',
            category: 'secondary',
            difficulty: 'advanced',
            estimatedTime: '20 minutos',
            prerequisites: ['tutorial_01'],
            objectives: [
                {
                    id: 'identify_contamination_source',
                    description: 'Identificar fonte de contamina√ß√£o (agrot√≥xicos/esgoto)',
                    type: 'investigation',
                    target: 'contamination_source',
                    current: 0,
                    required: 1
                },
                {
                    id: 'build_water_treatment',
                    description: 'Construir esta√ß√£o de tratamento de √°gua',
                    type: 'build',
                    target: 'water_treatment_plant',
                    current: 0,
                    required: 1
                },
                {
                    id: 'implement_monitoring',
                    description: 'Implementar monitoramento de qualidade da √°gua',
                    type: 'build',
                    target: 'water_quality_monitor',
                    current: 0,
                    required: 3
                }
            ],
            rewards: {
                score: 500,
                budget: 10000,
                experience: 250,
                unlock: ['advanced_water_treatment']
            },
            educationalContent: {
                concepts: ['√°gua subterr√¢nea contaminada', 'nitratos', 'coliformes fecais', 'chorume'],
                facts: [
                    'Nitratos em excesso na √°gua podem causar metahemoglobinemia em beb√™s.',
                    'Coliformes fecais indicam contamina√ß√£o por esgoto e risco de doen√ßas.',
                    'Chorume de aterros pode contaminar aqu√≠feros por d√©cadas.',
                    'Agrot√≥xicos podem persistir no solo e contaminar √°gua subterr√¢nea.',
                    'Baixo oxig√™nio dissolvido indica polui√ß√£o org√¢nica severa.'
                ],
                tips: [
                    'Monitore regularmente a qualidade da √°gua em po√ßos pr√≥ximos a atividades agr√≠colas.',
                    'Implemente barreiras de prote√ß√£o ao redor de fontes de √°gua.',
                    'Use tecnologias de biorremedia√ß√£o para tratar contamina√ß√£o org√¢nica.',
                    'Estabele√ßa zonas de prote√ß√£o ao redor de po√ßos de abastecimento.'
                ]
            }
        });

        // ===== MISS√ïES AMBIENTAIS AVAN√áADAS =====

        // Produ√ß√£o Canavieira e Impactos
        this.addQuest('env_sugarcane_impact', {
            title: 'Impactos da Produ√ß√£o Canavieira',
            description: 'Gerencie os impactos ambientais da produ√ß√£o de cana-de-a√ß√∫car na bacia hidrogr√°fica.',
            type: 'secondary',
            category: 'secondary',
            difficulty: 'expert',
            estimatedTime: '30 minutos',
            prerequisites: ['edu_watershed_management'],
            objectives: [
                {
                    id: 'assess_pesticide_impact',
                    description: 'Avaliar impacto do uso de agrot√≥xicos',
                    type: 'analysis',
                    target: 'pesticide_assessment',
                    current: 0,
                    required: 1
                },
                {
                    id: 'implement_buffer_zones',
                    description: 'Criar zonas de amortecimento ao redor de rios',
                    type: 'build',
                    target: 'buffer_zone',
                    current: 0,
                    required: 5
                },
                {
                    id: 'manage_livestock_waste',
                    description: 'Implementar gest√£o de res√≠duos da pecu√°ria',
                    type: 'build',
                    target: 'livestock_waste_management',
                    current: 0,
                    required: 2
                },
                {
                    id: 'prevent_erosion',
                    description: 'Implementar medidas contra eros√£o e assoreamento',
                    type: 'build',
                    target: 'erosion_control',
                    current: 0,
                    required: 3
                }
            ],
            rewards: {
                score: 750,
                budget: 15000,
                experience: 400,
                unlock: ['sustainable_agriculture', 'advanced_erosion_control']
            },
            educationalContent: {
                concepts: ['produ√ß√£o canavieira', 'uso de agrot√≥xicos', 'pecu√°ria', 'eros√£o', 'assoreamento', 'sedimenta√ß√£o'],
                facts: [
                    'A cana-de-a√ß√∫car √© uma das culturas que mais consome √°gua no Brasil.',
                    'Agrot√≥xicos podem contaminar √°guas superficiais e subterr√¢neas.',
                    'Pecu√°ria intensiva pode causar compacta√ß√£o do solo e eros√£o.',
                    'Eros√£o causa perda de solo f√©rtil e assoreamento de rios.',
                    'Sedimenta√ß√£o reduz a capacidade de armazenamento de reservat√≥rios.',
                    'Zonas de amortecimento reduzem em at√© 90% a chegada de poluentes aos rios.'
                ],
                tips: [
                    'Mantenha pelo menos 50m de vegeta√ß√£o entre cultivos e corpos d\'√°gua.',
                    'Use pr√°ticas de agricultura sustent√°vel para reduzir uso de agrot√≥xicos.',
                    'Implemente sistemas de rota√ß√£o de pastagens para evitar degrada√ß√£o.',
                    'Construa terra√ßos e curvas de n√≠vel para controlar eros√£o.',
                    'Monitore a turbidez da √°gua como indicador de sedimenta√ß√£o.'
                ]
            }
        });

        // ===== MISS√ïES DE INFRAESTRUTURA VERDE =====

        // Solu√ß√µes Baseadas na Natureza
        this.addQuest('green_infrastructure', {
            title: 'Infraestrutura Verde Urbana',
            description: 'Implemente solu√ß√µes baseadas na natureza para gest√£o sustent√°vel da √°gua urbana.',
            type: 'primary',
            category: 'primary',
            difficulty: 'intermediate',
            estimatedTime: '25 minutos',
            prerequisites: ['edu_hydrological_cycle'],
            objectives: [
                {
                    id: 'create_linear_park',
                    description: 'Criar parque linear em contato com o rio',
                    type: 'build',
                    target: 'linear_park',
                    current: 0,
                    required: 1
                },
                {
                    id: 'install_green_roofs',
                    description: 'Instalar tetos verdes em edif√≠cios p√∫blicos',
                    type: 'build',
                    target: 'green_roof',
                    current: 0,
                    required: 5
                },
                {
                    id: 'build_green_walls',
                    description: 'Construir paredes verdes para purifica√ß√£o do ar',
                    type: 'build',
                    target: 'green_wall',
                    current: 0,
                    required: 3
                },
                {
                    id: 'create_floating_gardens',
                    description: 'Instalar jardins flutuantes com plantas filtradoras',
                    type: 'build',
                    target: 'floating_garden',
                    current: 0,
                    required: 2
                },
                {
                    id: 'prevent_disorderly_occupation',
                    description: 'Prevenir ocupa√ß√£o desordenada em √°reas de bacia',
                    type: 'management',
                    target: 'occupation_control',
                    current: 0,
                    required: 1
                }
            ],
            rewards: {
                score: 600,
                budget: 20000,
                experience: 300,
                unlock: ['advanced_green_infrastructure', 'urban_ecology']
            },
            educationalContent: {
                concepts: ['parque linear', 'jardim de chuva', 'tetos verdes', 'paredes verdes', 'jardins flutuantes', 'ocupa√ß√£o desordenada'],
                facts: [
                    'Parques lineares protegem rios urbanos e oferecem lazer √† popula√ß√£o.',
                    'Tetos verdes podem reduzir em at√© 50% o escoamento superficial.',
                    'Paredes verdes melhoram a qualidade do ar e reduzem temperatura urbana.',
                    'Jardins flutuantes com plantas filtradoras purificam a √°gua naturalmente.',
                    'Ocupa√ß√£o desordenada em bacias hidrogr√°ficas aumenta risco de enchentes.',
                    'Infraestrutura verde custa 50% menos que solu√ß√µes convencionais.'
                ],
                tips: [
                    'Use plantas nativas em projetos de infraestrutura verde.',
                    'Integre parques lineares com ciclovias e transporte p√∫blico.',
                    'Escolha plantas com alta capacidade de filtra√ß√£o para jardins flutuantes.',
                    'Implemente zoneamento rigoroso para proteger √°reas de bacia.',
                    'Combine m√∫ltiplas solu√ß√µes verdes para m√°xima efici√™ncia.'
                ]
            }
        });

        // ===== MISS√ÉO DE PESQUISA E DESENVOLVIMENTO =====

        // Centro de Pesquisas H√≠dricas
        this.addQuest('research_center_mission', {
            title: 'Centro de Pesquisas H√≠dricas',
            description: 'Estabele√ßa um centro de pesquisas para desenvolver tecnologias inovadoras de gest√£o h√≠drica.',
            type: 'primary',
            category: 'primary',
            difficulty: 'expert',
            estimatedTime: '40 minutos',
            prerequisites: ['crisis_groundwater_contamination', 'green_infrastructure'],
            objectives: [
                {
                    id: 'build_research_center',
                    description: 'Construir Centro de Pesquisas H√≠dricas',
                    type: 'build',
                    target: 'water_research_center',
                    current: 0,
                    required: 1
                },
                {
                    id: 'develop_monitoring_network',
                    description: 'Desenvolver rede de monitoramento da bacia',
                    type: 'build',
                    target: 'monitoring_station',
                    current: 0,
                    required: 10
                },
                {
                    id: 'research_new_technologies',
                    description: 'Pesquisar tecnologias de tratamento avan√ßado',
                    type: 'research',
                    target: 'advanced_treatment_tech',
                    current: 0,
                    required: 3
                },
                {
                    id: 'educate_community',
                    description: 'Educar comunidade sobre prote√ß√£o h√≠drica',
                    type: 'education',
                    target: 'community_education',
                    current: 0,
                    required: 1000 // pessoas educadas
                }
            ],
            rewards: {
                score: 1000,
                budget: 50000,
                experience: 500,
                unlock: ['master_water_guardian']
            },
            educationalContent: {
                concepts: ['centros de pesquisas', 'monitoramento ambiental', 'tecnologias h√≠dricas', 'educa√ß√£o ambiental'],
                facts: [
                    'Centros de pesquisa s√£o fundamentais para inova√ß√£o em gest√£o h√≠drica.',
                    'Monitoramento cont√≠nuo permite detec√ß√£o precoce de problemas.',
                    'Tecnologias avan√ßadas podem tratar at√© 99% dos contaminantes.',
                    'Educa√ß√£o ambiental √© a base para mudan√ßas comportamentais duradouras.',
                    'Pesquisa aplicada gera solu√ß√µes espec√≠ficas para cada regi√£o.'
                ],
                tips: [
                    'Integre universidades e institutos de pesquisa ao projeto.',
                    'Use sensores IoT para monitoramento em tempo real.',
                    'Desenvolva tecnologias adaptadas √†s condi√ß√µes locais.',
                    'Crie programas educacionais para diferentes faixas et√°rias.',
                    'Compartilhe resultados de pesquisa com outras cidades.'
                ]
            }
        });

        // ===== ENHANCED MISSIONS =====
        this.addEnhancedMissions();

        console.log(`‚úÖ ${this.quests.size} miss√µes definidas (incluindo miss√µes aprimoradas)`);
    }

    addEnhancedMissions() {
        // ===== STORY MISSION CHAIN: "A NOVA GESTORA" =====
        this.addQuest('story_chain_01_01', {
            title: 'A Nova Gestora - Parte 1: Primeiro Dia',
            description: 'Voc√™ foi nomeada a nova gestora de recursos h√≠dricos da cidade. Conhe√ßa a situa√ß√£o atual e tome suas primeiras decis√µes.',
            type: 'story',
            category: 'secondary',
            difficulty: 'beginner',
            estimatedTime: '8 minutos',
            chainId: 'nova_gestora',
            chainPosition: 1,
            urgency: 'normal',
            missionIcon: 'üë©‚Äçüíº',
            stakeholders: ['citizens', 'government'],
            scalingRewards: true,
            objectives: [
                {
                    id: 'inspect_infrastructure',
                    description: 'Inspecionar a infraestrutura existente (construir 1 esta√ß√£o de monitoramento)',
                    type: 'build',
                    target: 'monitoring_station',
                    current: 0,
                    required: 1
                },
                {
                    id: 'meet_citizens',
                    description: 'Conhecer as necessidades dos cidad√£os (manter satisfa√ß√£o acima de 60%)',
                    type: 'resource',
                    target: 'satisfaction',
                    current: 0,
                    required: 60,
                    comparison: 'greater'
                }
            ],
            choices: [
                {
                    id: 'management_style',
                    question: 'Qual ser√° seu estilo de gest√£o?',
                    options: [
                        {
                            text: 'Priorizar efici√™ncia e resultados r√°pidos',
                            consequences: { reputation: { business: 5, citizens: -2 } }
                        },
                        {
                            text: 'Focar em participa√ß√£o cidad√£ e transpar√™ncia',
                            consequences: { reputation: { citizens: 5, government: -2 } }
                        },
                        {
                            text: 'Equilibrar todas as necessidades',
                            consequences: { reputation: { citizens: 2, business: 2, government: 2 } }
                        }
                    ]
                }
            ],
            rewards: {
                score: 150,
                budget: 3000,
                experience: 75,
                reputation: { government: 3 }
            }
        });

        this.addQuest('story_chain_01_02', {
            title: 'A Nova Gestora - Parte 2: Primeira Crise',
            description: 'Um vazamento foi detectado na rede principal. Como voc√™ lidar√° com esta primeira emerg√™ncia?',
            type: 'story',
            category: 'secondary',
            difficulty: 'intermediate',
            estimatedTime: '12 minutos',
            chainId: 'nova_gestora',
            chainPosition: 2,
            urgency: 'high',
            timeLimit: 900, // 15 minutos
            missionIcon: 'üö®',
            stakeholders: ['citizens', 'environment'],
            scalingRewards: true,
            status: 'locked', // Unlocked when previous mission completes
            objectives: [
                {
                    id: 'emergency_response',
                    description: 'Responder √† emerg√™ncia (construir 1 esta√ß√£o de reparo)',
                    type: 'build',
                    target: 'repair_station',
                    current: 0,
                    required: 1
                },
                {
                    id: 'minimize_waste',
                    description: 'Minimizar desperd√≠cio de √°gua (manter efici√™ncia acima de 75%)',
                    type: 'resource',
                    target: 'water_efficiency',
                    current: 0,
                    required: 75,
                    comparison: 'greater'
                },
                {
                    id: 'public_communication',
                    description: 'Comunicar-se com o p√∫blico (manter satisfa√ß√£o acima de 50% durante a crise)',
                    type: 'sustained',
                    target: 'satisfaction',
                    current: 0,
                    required: 300, // 5 minutos
                    threshold: 50
                }
            ],
            choices: [
                {
                    id: 'crisis_approach',
                    question: 'Como voc√™ abordar√° esta crise?',
                    options: [
                        {
                            text: 'Reparo r√°pido, mesmo com custos altos',
                            consequences: {
                                budget: -2000,
                                reputation: { citizens: 5, business: -3 }
                            }
                        },
                        {
                            text: 'Solu√ß√£o econ√¥mica, mas mais demorada',
                            consequences: {
                                timeLimit: 1200,
                                reputation: { business: 3, citizens: -2 }
                            }
                        },
                        {
                            text: 'Buscar ajuda de especialistas externos',
                            consequences: {
                                budget: -1000,
                                reputation: { government: 2, environment: 3 }
                            }
                        }
                    ]
                }
            ],
            rewards: {
                score: 250,
                budget: 4000,
                experience: 100,
                reputation: { citizens: 5 },
                performanceUnlocks: ['advanced_monitoring']
            }
        });

        // ===== SEASONAL EVENT: DIA MUNDIAL DA √ÅGUA =====
        this.addQuest('seasonal_water_day', {
            title: 'üíß Dia Mundial da √Ågua - Campanha Especial',
            description: 'Organize uma campanha especial para o Dia Mundial da √Ågua. Eduque a popula√ß√£o e promova a conserva√ß√£o.',
            type: 'seasonal',
            category: 'secondary',
            difficulty: 'intermediate',
            estimatedTime: '20 minutos',
            urgency: 'normal',
            timeWindow: { start: Date.now(), end: Date.now() + (7 * 24 * 60 * 60 * 1000) }, // 7 days
            missionIcon: 'üåç',
            stakeholders: ['citizens', 'environment'],
            scalingRewards: true,
            objectives: [
                {
                    id: 'education_campaign',
                    description: 'Construir 3 centros educacionais',
                    type: 'build',
                    target: 'education_center',
                    current: 0,
                    required: 3
                },
                {
                    id: 'water_conservation',
                    description: 'Reduzir consumo per capita em 15%',
                    type: 'resource',
                    target: 'water_consumption_reduction',
                    current: 0,
                    required: 15,
                    comparison: 'greater'
                },
                {
                    id: 'community_engagement',
                    description: 'Alcan√ßar 85% de satisfa√ß√£o cidad√£',
                    type: 'resource',
                    target: 'satisfaction',
                    current: 0,
                    required: 85,
                    comparison: 'greater'
                }
            ],
            dynamicObjectives: [
                {
                    id: 'bonus_recycling',
                    description: 'B√îNUS: Implementar sistema de reciclagem de √°gua',
                    type: 'build',
                    target: 'water_recycling_plant',
                    current: 0,
                    required: 1,
                    unlockCondition: 'satisfaction >= 80'
                }
            ],
            rewards: {
                score: 400,
                budget: 6000,
                experience: 150,
                achievement: 'water_day_champion',
                reputation: { citizens: 8, environment: 10 },
                unlock: ['advanced_filtration'],
                performanceUnlocks: ['smart_meters', 'leak_detection_ai']
            }
        });

        // ===== EMERGENCY MISSION: CONTAMINA√á√ÉO =====
        this.addQuest('emergency_contamination', {
            title: '‚ò£Ô∏è EMERG√äNCIA: Contamina√ß√£o Detectada',
            description: 'Contamina√ß√£o qu√≠mica foi detectada no reservat√≥rio principal. A√ß√£o imediata necess√°ria para proteger a sa√∫de p√∫blica!',
            type: 'emergency',
            category: 'secondary',
            difficulty: 'expert',
            estimatedTime: '10 minutos',
            urgency: 'critical',
            timeLimit: 600, // 10 minutos
            missionIcon: '‚ò£Ô∏è',
            stakeholders: ['citizens', 'environment', 'government'],
            scalingRewards: true,
            objectives: [
                {
                    id: 'isolate_contamination',
                    description: 'URGENTE: Isolar fonte de contamina√ß√£o (construir 2 esta√ß√µes de isolamento)',
                    type: 'build',
                    target: 'isolation_station',
                    current: 0,
                    required: 2
                },
                {
                    id: 'alternative_supply',
                    description: 'Estabelecer fornecimento alternativo (construir 3 pontos de distribui√ß√£o)',
                    type: 'build',
                    target: 'distribution_point',
                    current: 0,
                    required: 3
                },
                {
                    id: 'public_safety',
                    description: 'Manter seguran√ßa p√∫blica (satisfa√ß√£o n√£o pode cair abaixo de 30%)',
                    type: 'avoid',
                    target: 'satisfaction_critical',
                    current: 0,
                    required: 30,
                    comparison: 'greater'
                }
            ],
            choices: [
                {
                    id: 'contamination_response',
                    question: 'Estrat√©gia de resposta √† contamina√ß√£o:',
                    options: [
                        {
                            text: 'Evacua√ß√£o preventiva da √°rea afetada',
                            consequences: {
                                reputation: { citizens: 8, government: 5 },
                                budget: -5000
                            }
                        },
                        {
                            text: 'Tratamento in-loco com tecnologia avan√ßada',
                            consequences: {
                                reputation: { environment: 8, business: 3 },
                                budget: -3000
                            }
                        },
                        {
                            text: 'Coordena√ß√£o com autoridades estaduais',
                            consequences: {
                                reputation: { government: 10 },
                                timeLimit: 900 // Mais tempo dispon√≠vel
                            }
                        }
                    ]
                }
            ],
            rewards: {
                score: 500,
                budget: 8000,
                experience: 200,
                achievement: 'crisis_hero',
                reputation: { citizens: 10, environment: 8, government: 6 },
                unlock: ['contamination_detector', 'emergency_protocol'],
                performanceUnlocks: ['rapid_response_team', 'advanced_treatment']
            },
            consequences: {
                failure: {
                    reputation: { citizens: -15, environment: -10, government: -8 },
                    budget: -10000,
                    unlockMission: 'recovery_contamination'
                }
            }
        });
    }
    
    addQuest(id, config) {
        const quest = {
            id,
            ...config,
            status: 'available',
            startTime: null,
            completionTime: null,
            progress: 0,

            // ===== ENHANCED MISSION PROPERTIES =====
            urgency: config.urgency || 'normal',           // low, normal, high, critical
            chainId: config.chainId || null,               // Mission chain identifier
            chainPosition: config.chainPosition || 0,      // Position in chain
            timeWindow: config.timeWindow || null,          // Time window to start mission
            choices: config.choices || [],                 // Interactive choices
            consequences: config.consequences || {},        // Results of choices
            dynamicObjectives: config.dynamicObjectives || [], // Conditional objectives
            scalingRewards: config.scalingRewards || false,    // Performance-based rewards
            missionIcon: config.missionIcon || 'üéØ',       // Visual icon
            stakeholders: config.stakeholders || [],       // Affected reputation groups
            unlockConditions: config.unlockConditions || {}, // Special unlock requirements
        };

        this.quests.set(id, quest);

        // Register mission chain if specified
        if (quest.chainId) {
            this.registerMissionChain(quest.chainId, id, quest.chainPosition);
        }
    }

    // ===== ENHANCED MISSION CHAIN SYSTEM =====
    registerMissionChain(chainId, missionId, position) {
        if (!this.missionChains.has(chainId)) {
            this.missionChains.set(chainId, []);
        }

        const chain = this.missionChains.get(chainId);
        chain[position] = missionId;

        // Sort chain by position
        chain.sort((a, b) => {
            const questA = this.quests.get(a);
            const questB = this.quests.get(b);
            return (questA?.chainPosition || 0) - (questB?.chainPosition || 0);
        });
    }

    getNextMissionInChain(chainId, currentPosition) {
        const chain = this.missionChains.get(chainId);
        if (!chain) return null;

        const nextIndex = chain.findIndex(missionId => {
            const quest = this.quests.get(missionId);
            return quest && quest.chainPosition > currentPosition;
        });

        return nextIndex >= 0 ? chain[nextIndex] : null;
    }
    
    // ===== CONTROLE DE MISS√ïES =====
    startFirstQuest() {
        this.startQuest('tutorial_01');
    }
    
    startQuest(questId) {
        const quest = this.quests.get(questId);
        if (!quest) {
            console.error(`‚ùå Miss√£o n√£o encontrada: ${questId}`);
            return false;
        }
        
        if (quest.status !== 'available') {
            console.warn(`‚ö†Ô∏è Miss√£o n√£o dispon√≠vel: ${questId}`);
            return false;
        }
        
        // Verificar limite de miss√µes ativas
        if (this.activeQuests.size >= this.maxActiveQuests && quest.type !== 'tutorial') {
            console.warn('‚ö†Ô∏è Muitas miss√µes ativas');
            return false;
        }
        
        // Iniciar miss√£o
        quest.status = 'active';
        quest.startTime = Date.now();
        this.activeQuests.add(questId);
        
        // Definir como miss√£o principal se for tutorial ou main
        if (quest.type === 'tutorial' || quest.type === 'main') {
            this.currentMainQuest = questId;
        }
        
        // Mostrar na UI
        this.updateQuestUI();
        
        // Notificar
        if (this.gameManager.uiManager) {
            this.gameManager.uiManager.showNotification(
                `Nova miss√£o: ${quest.title}`,
                'info'
            );
        }
        
        console.log(`üéØ Miss√£o iniciada: ${quest.title}`);
        return true;
    }
    
    completeQuest(questId) {
        const quest = this.quests.get(questId);
        if (!quest || quest.status !== 'active') return false;

        // Marcar como completa
        quest.status = 'completed';
        quest.completionTime = Date.now();
        this.activeQuests.delete(questId);
        this.completedQuests.add(questId);

        // ===== ENHANCED COMPLETION SYSTEM =====

        // Calculate performance-based rewards
        const performanceMultiplier = this.calculatePerformanceMultiplier(quest);

        // Aplicar recompensas (with scaling if enabled)
        this.applyQuestRewards(quest, performanceMultiplier);

        // Handle mission chain progression
        if (quest.chainId) {
            this.progressMissionChain(quest.chainId, quest.chainPosition);
        }

        // Apply reputation changes based on stakeholders
        this.updateReputation(quest);

        // Remove from urgent missions if applicable
        this.urgentMissions.delete(questId);

        // Verificar pr√≥ximas miss√µes
        this.checkUnlockConditions();

        // Atualizar UI
        this.updateQuestUI();

        // Enhanced notification with performance feedback
        if (this.gameManager.uiManager) {
            const performanceText = performanceMultiplier > 1 ?
                ` (Desempenho Excelente! +${Math.round((performanceMultiplier - 1) * 100)}% b√¥nus)` : '';

            this.gameManager.uiManager.showNotification(
                `Miss√£o completa: ${quest.title}${performanceText}`,
                'success',
                5000
            );
        }

        // Som de sucesso
        AudioManager.playSound('sfx_success');

        console.log(`‚úÖ Miss√£o completa: ${quest.title} (Performance: ${performanceMultiplier.toFixed(2)}x)`);
        return true;
    }

    // ===== ENHANCED MISSION PROGRESSION =====
    progressMissionChain(chainId, completedPosition) {
        const nextMissionId = this.getNextMissionInChain(chainId, completedPosition);

        if (nextMissionId) {
            const nextMission = this.quests.get(nextMissionId);
            if (nextMission && nextMission.status === 'locked') {
                nextMission.status = 'available';

                // Notify player about new mission
                if (this.gameManager.uiManager) {
                    this.gameManager.uiManager.showNotification(
                        `üîì Nova miss√£o desbloqueada: ${nextMission.title}`,
                        'info',
                        6000
                    );
                }

                console.log(`üîì Miss√£o da cadeia desbloqueada: ${nextMission.title}`);
            }
        } else {
            // Chain completed
            this.activeChains.delete(chainId);

            if (this.gameManager.uiManager) {
                this.gameManager.uiManager.showNotification(
                    `üèÜ S√©rie de miss√µes completa!`,
                    'success',
                    4000
                );
            }
        }
    }

    calculatePerformanceMultiplier(quest) {
        if (!quest.scalingRewards) return 1.0;

        let multiplier = 1.0;
        const completionTime = quest.completionTime - quest.startTime;

        // Time bonus (faster completion = higher multiplier)
        if (quest.estimatedTime) {
            const estimatedMs = this.parseTimeToMs(quest.estimatedTime);
            if (completionTime < estimatedMs * 0.8) {
                multiplier += 0.3; // 30% bonus for fast completion
            } else if (completionTime < estimatedMs) {
                multiplier += 0.1; // 10% bonus for on-time completion
            }
        }

        // Objective completion bonus
        const perfectCompletion = quest.objectives.every(obj => obj.current >= obj.required);
        if (perfectCompletion) {
            multiplier += 0.2; // 20% bonus for perfect completion
        }

        return Math.min(multiplier, 2.0); // Cap at 2x multiplier
    }

    parseTimeToMs(timeString) {
        // Convert "5 minutos" to milliseconds
        const match = timeString.match(/(\d+)\s*(minuto|hora)/);
        if (!match) return 300000; // Default 5 minutes

        const value = parseInt(match[1]);
        const unit = match[2];

        if (unit.startsWith('minuto')) {
            return value * 60 * 1000;
        } else if (unit.startsWith('hora')) {
            return value * 60 * 60 * 1000;
        }

        return 300000; // Default 5 minutes
    }
    
    // ===== ENHANCED UPDATE SYSTEM =====
    update(deltaTime) {
        // Atualizar progresso das miss√µes ativas
        this.activeQuests.forEach(questId => {
            this.updateQuestProgress(questId, deltaTime);
        });

        // ===== NEW UPDATE FEATURES =====

        // Check time window missions
        this.checkTimeWindowMissions();

        // Update urgent mission indicators
        this.updateUrgencyIndicators();

        // Process dynamic objectives
        this.processDynamicObjectives();

        // Check for automatic choice triggers
        this.checkChoiceTriggers();
    }

    updateUrgencyIndicators() {
        // Update UI indicators for urgent missions
        const urgentMissions = this.getMissionsByUrgency('critical').concat(
            this.getMissionsByUrgency('high')
        );

        if (urgentMissions.length > 0 && this.gameManager.uiManager) {
            // TODO: Add pulsing urgency indicator to UI
        }
    }

    processDynamicObjectives() {
        this.activeQuests.forEach(questId => {
            const quest = this.quests.get(questId);
            if (!quest || !quest.dynamicObjectives) return;

            quest.dynamicObjectives.forEach(dynObj => {
                if (!dynObj.activated && this.checkUnlockCondition(dynObj.unlockCondition)) {
                    // Activate dynamic objective
                    dynObj.activated = true;
                    quest.objectives.push(dynObj);

                    if (this.gameManager.uiManager) {
                        this.gameManager.uiManager.showNotification(
                            `üéØ Novo objetivo: ${dynObj.description}`,
                            'info',
                            5000
                        );
                    }

                    console.log(`üéØ Objetivo din√¢mico ativado: ${dynObj.description}`);
                }
            });
        });
    }

    checkUnlockCondition(condition) {
        if (!condition) return true;

        // Parse condition string (e.g., "satisfaction >= 80")
        const match = condition.match(/(\w+)\s*(>=|<=|>|<|==)\s*(\d+)/);
        if (!match) return false;

        const [, resource, operator, value] = match;
        const currentValue = this.getResourceValue(resource);
        const targetValue = parseInt(value);

        switch (operator) {
            case '>=': return currentValue >= targetValue;
            case '<=': return currentValue <= targetValue;
            case '>': return currentValue > targetValue;
            case '<': return currentValue < targetValue;
            case '==': return currentValue === targetValue;
            default: return false;
        }
    }

    getResourceValue(resourceName) {
        const resourceManager = this.gameManager.resourceManager;
        if (!resourceManager) return 0;

        switch (resourceName) {
            case 'satisfaction':
                return resourceManager.resources.satisfaction?.current || 0;
            case 'population':
                return resourceManager.resources.population?.current || 0;
            case 'pollution':
                return resourceManager.resources.pollution?.current || 0;
            case 'budget':
                return resourceManager.resources.budget?.current || 0;
            case 'water':
                return resourceManager.resources.water?.current || 0;
            default:
                return 0;
        }
    }

    checkChoiceTriggers() {
        this.activeQuests.forEach(questId => {
            const quest = this.quests.get(questId);
            if (!quest || !quest.choices) return;

            quest.choices.forEach(choice => {
                if (choice.autoTrigger && this.checkUnlockCondition(choice.autoTrigger)) {
                    this.presentChoice(questId, choice.id);
                }
            });
        });
    }
    
    updateQuestProgress(questId, deltaTime) {
        const quest = this.quests.get(questId);
        if (!quest || quest.status !== 'active') return;
        
        let allObjectivesComplete = true;
        let totalProgress = 0;
        
        quest.objectives.forEach(objective => {
            const progress = this.checkObjectiveProgress(objective);
            objective.current = progress;
            
            const objectiveProgress = Math.min(progress / objective.required, 1);
            totalProgress += objectiveProgress;
            
            if (objectiveProgress < 1) {
                allObjectivesComplete = false;
            }
        });
        
        // Calcular progresso total
        const oldProgress = quest.progress;
        quest.progress = totalProgress / quest.objectives.length;

        // Update UI if progress changed
        if (Math.abs(oldProgress - quest.progress) > 0.01) {
            this.updateQuestUI();
        }

        // Verificar limite de tempo
        if (quest.timeLimit) {
            const elapsed = (Date.now() - quest.startTime) / 1000;
            if (elapsed >= quest.timeLimit) {
                this.failQuest(questId);
                return;
            }
        }

        // Verificar conclus√£o
        if (allObjectivesComplete) {
            this.completeQuest(questId);
        }
    }
    
    checkObjectiveProgress(objective) {
        const resourceManager = this.gameManager.resourceManager;
        const buildingSystem = this.gameManager.buildingSystem;
        
        switch (objective.type) {
            case 'build':
                if (buildingSystem) {
                    return buildingSystem.getBuildingsByType(objective.target).length;
                }
                break;
                
            case 'resource':
                if (resourceManager) {
                    const resources = resourceManager.getAllResources();
                    const value = this.getResourceValue(resources, objective.target);
                    
                    if (objective.comparison === 'greater') {
                        return value >= objective.required ? objective.required : value;
                    } else if (objective.comparison === 'less') {
                        return value <= objective.required ? objective.required : value;
                    } else {
                        return value;
                    }
                }
                break;
                
            case 'sustained':
                if (resourceManager) {
                    const resources = resourceManager.getAllResources();
                    const value = this.getResourceValue(resources, objective.target);
                    
                    if (value >= objective.threshold) {
                        objective.sustainedTime = (objective.sustainedTime || 0) + 1;
                        return objective.sustainedTime;
                    } else {
                        objective.sustainedTime = 0;
                        return 0;
                    }
                }
                break;
                
            case 'survival':
                const elapsed = (Date.now() - this.quests.get(objective.questId)?.startTime || 0) / 1000;
                return Math.min(elapsed, objective.required);
                
            case 'avoid':
                // Implementar l√≥gica de evitar eventos
                return 0;
        }
        
        return 0;
    }
    
    getResourceValue(resources, target) {
        switch (target) {
            case 'water': return resources.water.current;
            case 'pollution': return resources.pollution.current;
            case 'population': return resources.population.current;
            case 'satisfaction': return resources.population.satisfaction;
            case 'budget': return resources.budget.current;
            default: return 0;
        }
    }
    
    // ===== ENHANCED REWARDS SYSTEM =====
    applyQuestRewards(quest, performanceMultiplier = 1.0) {
        if (!quest.rewards) return;

        const resourceManager = this.gameManager.resourceManager;
        const buildingSystem = this.gameManager.buildingSystem;

        // Pontua√ß√£o (with performance scaling)
        if (quest.rewards.score) {
            const scaledScore = Math.round(quest.rewards.score * performanceMultiplier);
            this.totalScore += scaledScore;

            if (performanceMultiplier > 1) {
                console.log(`üéØ Pontua√ß√£o com b√¥nus: ${scaledScore} (${quest.rewards.score} base + ${Math.round((performanceMultiplier - 1) * quest.rewards.score)} b√¥nus)`);
            }
        }

        // Or√ßamento (with performance scaling)
        if (quest.rewards.budget && resourceManager) {
            const scaledBudget = Math.round(quest.rewards.budget * performanceMultiplier);
            resourceManager.resources.budget.current += scaledBudget;

            if (performanceMultiplier > 1) {
                console.log(`üí∞ Or√ßamento com b√¥nus: ${scaledBudget}`);
            }
        }

        // Desbloqueios
        if (quest.rewards.unlock) {
            quest.rewards.unlock.forEach(buildingTypeId => {
                const buildingType = buildingSystem?.buildingTypes.get(buildingTypeId);
                if (buildingType) {
                    buildingType.unlocked = true;
                    console.log(`üîì Desbloqueado: ${buildingType.name}`);
                }
            });
        }

        // Conquistas
        if (quest.rewards.achievement) {
            this.unlockAchievement(quest.rewards.achievement);
        }

        // ===== NEW REWARD TYPES =====

        // Experience points
        if (quest.rewards.experience) {
            const scaledExp = Math.round(quest.rewards.experience * performanceMultiplier);
            // TODO: Implement experience system
            console.log(`‚≠ê Experi√™ncia ganha: ${scaledExp}`);
        }

        // Reputation changes
        if (quest.rewards.reputation) {
            Object.entries(quest.rewards.reputation).forEach(([group, change]) => {
                this.modifyReputation(group, change);
            });
        }

        // Special unlocks based on performance
        if (quest.rewards.performanceUnlocks && performanceMultiplier >= 1.5) {
            quest.rewards.performanceUnlocks.forEach(unlock => {
                console.log(`üåü Desbloqueio especial por desempenho: ${unlock}`);
                // TODO: Implement special unlocks
            });
        }
    }

    // ===== REPUTATION SYSTEM =====
    updateReputation(quest) {
        if (!quest.stakeholders || quest.stakeholders.length === 0) return;

        // Base reputation change based on quest completion
        const baseChange = quest.type === 'challenge' ? 3 : 2;

        quest.stakeholders.forEach(stakeholder => {
            this.modifyReputation(stakeholder, baseChange);
        });
    }

    modifyReputation(group, change) {
        if (this.reputation.hasOwnProperty(group)) {
            this.reputation[group] = Math.max(0, Math.min(100, this.reputation[group] + change));

            if (Math.abs(change) >= 5) {
                const direction = change > 0 ? 'melhorou' : 'piorou';
                const emoji = change > 0 ? 'üëç' : 'üëé';

                if (this.gameManager.uiManager) {
                    this.gameManager.uiManager.showNotification(
                        `${emoji} Reputa√ß√£o com ${this.getStakeholderName(group)} ${direction}`,
                        change > 0 ? 'success' : 'warning',
                        3000
                    );
                }
            }

            console.log(`üìä Reputa√ß√£o ${group}: ${this.reputation[group]} (${change > 0 ? '+' : ''}${change})`);
        }
    }

    getStakeholderName(group) {
        const names = {
            citizens: 'Cidad√£os',
            environment: 'Ambientalistas',
            business: 'Empres√°rios',
            government: 'Governo'
        };
        return names[group] || group;
    }

    // ===== INTERACTIVE CHOICE SYSTEM =====
    presentChoice(questId, choiceId) {
        const quest = this.quests.get(questId);
        if (!quest || quest.status !== 'active') return;

        const choice = quest.choices.find(c => c.id === choiceId);
        if (!choice) return;

        // Show choice dialog
        this.showChoiceDialog(quest, choice);
    }

    showChoiceDialog(quest, choice) {
        if (!this.gameManager.uiManager) return;

        const dialogContent = `
            <div class="choice-dialog">
                <div class="choice-header">
                    <h3>${quest.title}</h3>
                    <p class="choice-question">${choice.question}</p>
                </div>
                <div class="choice-options">
                    ${choice.options.map((option, index) => `
                        <button class="choice-option"
                                onclick="window.gameManager.questSystem.makeChoice('${quest.id}', '${choice.id}', ${index})">
                            ${option.text}
                        </button>
                    `).join('')}
                </div>
            </div>
        `;

        // TODO: Implement choice dialog UI
        console.log('Choice Dialog:', dialogContent);
    }

    makeChoice(questId, choiceId, optionIndex) {
        const quest = this.quests.get(questId);
        if (!quest) return;

        const choice = quest.choices.find(c => c.id === choiceId);
        if (!choice || !choice.options[optionIndex]) return;

        const selectedOption = choice.options[optionIndex];

        // Store player choice
        this.playerChoices.set(`${questId}_${choiceId}`, {
            questId,
            choiceId,
            optionIndex,
            option: selectedOption,
            timestamp: Date.now()
        });

        // Apply immediate consequences
        this.applyChoiceConsequences(selectedOption.consequences);

        // Remove choice from quest (can only choose once)
        quest.choices = quest.choices.filter(c => c.id !== choiceId);

        // Notify player
        if (this.gameManager.uiManager) {
            this.gameManager.uiManager.showNotification(
                `Decis√£o tomada: ${selectedOption.text}`,
                'info',
                4000
            );
        }

        console.log(`üéØ Escolha feita: ${selectedOption.text}`);
    }

    applyChoiceConsequences(consequences) {
        if (!consequences) return;

        // Apply reputation changes
        if (consequences.reputation) {
            Object.entries(consequences.reputation).forEach(([group, change]) => {
                this.modifyReputation(group, change);
            });
        }

        // Apply budget changes
        if (consequences.budget && this.gameManager.resourceManager) {
            this.gameManager.resourceManager.resources.budget.current += consequences.budget;

            if (consequences.budget !== 0) {
                const type = consequences.budget > 0 ? 'Ganho' : 'Gasto';
                const amount = Math.abs(consequences.budget);
                console.log(`üí∞ ${type} de or√ßamento: ${amount}`);
            }
        }

        // Apply time limit changes
        if (consequences.timeLimit) {
            // TODO: Implement dynamic time limit changes
            console.log(`‚è∞ Limite de tempo alterado: ${consequences.timeLimit}s`);
        }

        // Apply other consequences
        Object.entries(consequences).forEach(([key, value]) => {
            if (!['reputation', 'budget', 'timeLimit'].includes(key)) {
                console.log(`üîÑ Consequ√™ncia aplicada: ${key} = ${value}`);
            }
        });
    }

    // ===== ENHANCED MISSION MANAGEMENT =====
    getAvailableChoices(questId) {
        const quest = this.quests.get(questId);
        return quest?.choices || [];
    }

    getMissionsByUrgency(urgencyLevel) {
        return Array.from(this.quests.values()).filter(quest =>
            quest.urgency === urgencyLevel && quest.status === 'active'
        );
    }

    getActiveEmergencies() {
        return this.getMissionsByUrgency('critical').concat(
            this.getMissionsByUrgency('high')
        );
    }

    checkTimeWindowMissions() {
        const now = Date.now();

        this.quests.forEach(quest => {
            if (quest.timeWindow && quest.status === 'available') {
                if (now > quest.timeWindow.end) {
                    // Mission expired
                    quest.status = 'expired';
                    console.log(`‚è∞ Miss√£o expirou: ${quest.title}`);

                    if (this.gameManager.uiManager) {
                        this.gameManager.uiManager.showNotification(
                            `‚è∞ Miss√£o expirou: ${quest.title}`,
                            'warning',
                            5000
                        );
                    }
                }
            }
        });
    }
    
    unlockAchievement(achievementId) {
        if (!this.achievements.has(achievementId)) {
            this.achievements.add(achievementId);
            
            if (this.gameManager.uiManager) {
                this.gameManager.uiManager.showNotification(
                    `üèÜ Conquista desbloqueada: ${achievementId}`,
                    'success',
                    8000
                );
            }
            
            console.log(`üèÜ Conquista desbloqueada: ${achievementId}`);
        }
    }
    
    // ===== CONDI√á√ïES DE DESBLOQUEIO =====
    checkUnlockConditions() {
        // Verificar se novas miss√µes devem ser desbloqueadas
        if (this.completedQuests.has('tutorial_01') && !this.activeQuests.has('tutorial_02')) {
            this.startQuest('tutorial_02');
        }
        
        if (this.completedQuests.has('tutorial_02') && !this.activeQuests.has('tutorial_03')) {
            this.startQuest('tutorial_03');
        }
        
        if (this.completedQuests.has('tutorial_03') && !this.activeQuests.has('main_01')) {
            this.startQuest('main_01');
        }
    }
    
    // ===== FALHA DE MISS√ÉO =====
    failQuest(questId) {
        const quest = this.quests.get(questId);
        if (!quest) return;
        
        quest.status = 'failed';
        this.activeQuests.delete(questId);
        
        if (this.gameManager.uiManager) {
            this.gameManager.uiManager.showNotification(
                `Miss√£o falhou: ${quest.title}`,
                'error'
            );
        }
        
        console.log(`‚ùå Miss√£o falhou: ${quest.title}`);
    }
    
    // ===== ENHANCED MISSION MANAGEMENT UI =====

    /**
     * Opens the comprehensive mission management interface
     */
    openMissionInterface() {
        this.missionUI.isOpen = true;
        this.renderMissionInterface();

        // Show mission panel in details area
        if (this.gameManager.uiManager) {
            this.gameManager.uiManager.showMissionPanel();
        }
    }

    /**
     * Closes the mission management interface
     */
    closeMissionInterface() {
        this.missionUI.isOpen = false;

        if (this.gameManager.uiManager) {
            this.gameManager.uiManager.closeMissionPanel();
        }
    }

    /**
     * Renders the complete mission interface
     */
    renderMissionInterface() {
        const detailsContent = document.getElementById('details-content');
        if (!detailsContent) return;

        const categories = Object.keys(this.missionCategories);
        const currentCategory = this.missionUI.currentCategory;
        const missions = this.getMissionsByCategory(currentCategory);

        const content = `
            <div class="mission-interface enhanced">
                <div class="mission-header">
                    <h3>üéØ Sistema de Miss√µes</h3>
                    <button class="close-btn" onclick="window.gameManager.questSystem.closeMissionInterface()">‚úñÔ∏è</button>
                </div>

                <div class="mission-categories-simplified">
                    ${categories.map(cat => {
                        const category = this.missionCategories[cat];
                        const isActive = cat === currentCategory;
                        const missionCount = this.getMissionsByCategory(cat).length;

                        return `
                            <button class="category-btn-large ${isActive ? 'active' : ''}"
                                    onclick="window.gameManager.questSystem.selectCategory('${cat}')">
                                <div class="category-icon-large">${category.icon}</div>
                                <div class="category-info">
                                    <div class="category-name-large">${category.name}</div>
                                    <div class="category-description-small">${category.description}</div>
                                    <div class="mission-count-badge">${missionCount} miss√µes</div>
                                </div>
                            </button>
                        `;
                    }).join('')}
                </div>

                <div class="mission-content-area">
                    <div class="mission-list-header">
                        <h4>üìã ${this.missionCategories[currentCategory].name}</h4>
                        <div class="mission-list-stats">
                            <span class="active-missions">${this.activeQuests.size} ativas</span>
                            <span class="completed-missions">${this.completedQuests.size} completas</span>
                        </div>
                    </div>

                    <div class="mission-list-enhanced">
                        ${missions.length > 0 ?
                            missions.map(mission => this.renderMissionCard(mission)).join('') :
                            `<div class="no-missions">
                                <div class="no-missions-icon">üì≠</div>
                                <div class="no-missions-text">Nenhuma miss√£o dispon√≠vel nesta categoria</div>
                                <div class="no-missions-hint">Explore outras categorias ou complete miss√µes anteriores</div>
                            </div>`
                        }
                    </div>
                </div>

                <div class="mission-stats-compact">
                    <div class="stat-item-compact">
                        <span class="stat-icon">üéØ</span>
                        <span class="stat-value">${this.activeQuests.size}</span>
                        <span class="stat-label">Ativas</span>
                    </div>
                    <div class="stat-item-compact">
                        <span class="stat-icon">‚úÖ</span>
                        <span class="stat-value">${this.completedQuests.size}</span>
                        <span class="stat-label">Completas</span>
                    </div>
                    <div class="stat-item-compact">
                        <span class="stat-icon">‚≠ê</span>
                        <span class="stat-value">${this.totalScore}</span>
                        <span class="stat-label">Pontos</span>
                    </div>
                </div>
            </div>
        `;

        detailsContent.innerHTML = content;
    }

    /**
     * Renders a mission card
     */
    renderMissionCard(mission) {
        const isActive = this.activeQuests.has(mission.id);
        const isCompleted = this.completedQuests.has(mission.id);
        const canStart = this.canStartMission(mission.id);
        const category = this.missionCategories[mission.category];

        let statusClass = 'available';
        let statusText = 'Dispon√≠vel';
        let actionButton = '';

        // ===== ENHANCED STATUS HANDLING =====
        if (mission.status === 'expired') {
            statusClass = 'expired';
            statusText = 'Expirada';
            actionButton = '<button class="mission-btn expired" disabled>‚è∞ Expirada</button>';
        } else if (isCompleted) {
            statusClass = 'completed';
            statusText = 'Completa';
            actionButton = '<button class="mission-btn completed" disabled>‚úì Completa</button>';
        } else if (isActive) {
            statusClass = 'active';
            statusText = 'Ativa';
            actionButton = '<button class="mission-btn active" disabled>‚è≥ Em Progresso</button>';

            // Add choice button if choices are available
            if (mission.choices && mission.choices.length > 0) {
                actionButton += `<button class="mission-btn choice" onclick="window.gameManager.questSystem.presentChoice('${mission.id}', '${mission.choices[0].id}')">üé≠ Decidir</button>`;
            }
        } else if (canStart) {
            statusClass = 'available';
            statusText = 'Dispon√≠vel';
            actionButton = `<button class="mission-btn start" onclick="window.gameManager.questSystem.startMission('${mission.id}')">‚ñ∂Ô∏è Iniciar</button>`;
        } else {
            statusClass = 'locked';
            statusText = 'Bloqueada';
            actionButton = '<button class="mission-btn locked" disabled>üîí Bloqueada</button>';
        }

        // ===== ENHANCED VISUAL INDICATORS =====

        // Urgency indicator
        let urgencyIndicator = '';
        if (mission.urgency === 'critical') {
            urgencyIndicator = '<span class="urgency-indicator critical">üö® CR√çTICA</span>';
            statusClass += ' critical-urgency';
        } else if (mission.urgency === 'high') {
            urgencyIndicator = '<span class="urgency-indicator high">‚ö° URGENTE</span>';
            statusClass += ' high-urgency';
        }

        // Chain indicator
        let chainIndicator = '';
        if (mission.chainId) {
            chainIndicator = `<span class="chain-indicator">üîó Parte ${mission.chainPosition}</span>`;
        }

        // Time window indicator
        let timeWindowIndicator = '';
        if (mission.timeWindow && mission.status === 'available') {
            const timeLeft = mission.timeWindow.end - Date.now();
            const hoursLeft = Math.ceil(timeLeft / (1000 * 60 * 60));
            if (hoursLeft > 0) {
                timeWindowIndicator = `<span class="time-window">‚è∞ ${hoursLeft}h restantes</span>`;
            }
        }

        // Special features indicators
        let featuresIndicators = '';
        if (mission.scalingRewards) {
            featuresIndicators += '<span class="feature-indicator scaling">‚≠ê Recompensas Din√¢micas</span>';
        }
        if (mission.choices && mission.choices.length > 0) {
            featuresIndicators += '<span class="feature-indicator choices">üé≠ Decis√µes</span>';
        }
        if (mission.stakeholders && mission.stakeholders.length > 0) {
            featuresIndicators += '<span class="feature-indicator stakeholders">üë• Impacto Social</span>';
        }

        const progressPercent = isActive ? (mission.progress * 100) : (isCompleted ? 100 : 0);

        return `
            <div class="mission-card ${statusClass}" onclick="window.gameManager.questSystem.selectMission('${mission.id}')">
                <div class="mission-card-header">
                    <div class="mission-title">
                        <span class="mission-icon" style="color: ${category.color}">${mission.missionIcon || category.icon}</span>
                        <h4>${mission.title}</h4>
                    </div>
                    <div class="mission-status-area">
                        <div class="mission-status ${statusClass}">${statusText}</div>
                        ${urgencyIndicator}
                    </div>
                </div>

                <div class="mission-indicators">
                    ${chainIndicator}
                    ${timeWindowIndicator}
                    ${featuresIndicators}
                </div>

                <div class="mission-description">
                    <p>${mission.description}</p>
                    ${this.renderMissionInfoCards(mission)}
                </div>

                <div class="mission-meta">
                    <div class="mission-difficulty">
                        <span class="meta-label">Dificuldade:</span>
                        <span class="difficulty-${mission.difficulty}">${this.getDifficultyText(mission.difficulty)}</span>
                    </div>
                    <div class="mission-time">
                        <span class="meta-label">Tempo estimado:</span>
                        <span>${mission.estimatedTime || 'Vari√°vel'}</span>
                    </div>
                </div>

                ${this.renderStakeholders(mission)}
                ${this.renderPrerequisites(mission)}

                <div class="mission-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressPercent}%"></div>
                    </div>
                    <span class="progress-text">${Math.round(progressPercent)}%</span>
                </div>

                <div class="mission-actions">
                    ${actionButton}
                    <button class="mission-btn info" onclick="window.gameManager.questSystem.showMissionDetails('${mission.id}')">‚ÑπÔ∏è Detalhes</button>
                </div>
            </div>
        `;
    }

    renderStakeholders(mission) {
        if (!mission.stakeholders || mission.stakeholders.length === 0) return '';

        const stakeholderNames = mission.stakeholders.map(s => this.getStakeholderName(s));

        return `
            <div class="mission-stakeholders">
                <span class="meta-label">Grupos Afetados:</span>
                <span class="stakeholder-list">${stakeholderNames.join(', ')}</span>
            </div>
        `;
    }

    /**
     * Renders informational cards for mission categories (simplified version)
     */
    renderMissionInfoCards(mission) {
        // Get related info cards based on mission category
        const relatedCards = this.getRelatedInfoCards(mission);

        if (relatedCards.length === 0) return '';

        return `
            <div class="mission-info-cards">
                <div class="info-cards-label">Categorias Relacionadas:</div>
                <div class="info-cards-container">
                    ${relatedCards.map(cardKey => {
                        const card = this.missionCategories[cardKey];
                        return `
                            <div class="mission-info-card" style="border-left-color: ${card.color}">
                                <span class="info-card-icon" style="color: ${card.color}">${card.icon}</span>
                                <div class="info-card-content">
                                    <div class="info-card-name">${card.name}</div>
                                    <div class="info-card-description">${card.description}</div>
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            </div>
        `;
    }

    /**
     * Gets the most important current objective for a mission
     */
    getCurrentObjective(mission) {
        if (!mission || !mission.objectives) return null;

        // Find the first incomplete objective
        for (const objective of mission.objectives) {
            if (objective.current < objective.required) {
                return objective;
            }
        }

        // If all objectives are complete, return the last one
        return mission.objectives[mission.objectives.length - 1] || null;
    }

    /**
     * Gets actionable text for an objective
     */
    getActionableObjectiveText(objective, mission) {
        if (!objective) return mission.description;

        // Create actionable text based on objective type
        const remaining = objective.required - objective.current;

        if (objective.type === 'build') {
            if (remaining > 0) {
                return `Construa ${remaining} ${objective.buildingType || 'edif√≠cio(s)'}`;
            } else {
                return `‚úÖ ${objective.description}`;
            }
        } else if (objective.type === 'resource') {
            if (remaining > 0) {
                return `Colete ${remaining} unidades de ${objective.resourceType || 'recursos'}`;
            } else {
                return `‚úÖ ${objective.description}`;
            }
        } else if (objective.type === 'reach') {
            if (remaining > 0) {
                return `Alcance ${objective.required} ${objective.targetType || 'pontos'}`;
            } else {
                return `‚úÖ ${objective.description}`;
            }
        }

        // Default fallback
        return objective.description || mission.description;
    }

    /**
     * Gets action text for an objective
     */
    getObjectiveActionText(objective, mission) {
        if (!objective) return 'Clique para ver detalhes';

        const remaining = objective.required - objective.current;

        if (remaining <= 0) {
            return 'Objetivo conclu√≠do!';
        }

        if (objective.type === 'build') {
            return 'Abrir painel de constru√ß√£o';
        } else if (objective.type === 'resource') {
            return 'Ver recursos necess√°rios';
        } else if (objective.type === 'reach') {
            return 'Ver progresso detalhado';
        }

        return 'Clique para mais informa√ß√µes';
    }

    /**
     * Gets appropriate icon for an objective
     */
    getObjectiveIcon(objective, mission) {
        if (!objective) return 'üéØ';

        const remaining = objective.required - objective.current;

        if (remaining <= 0) {
            return '‚úÖ';
        }

        if (objective.type === 'build') {
            return 'üèóÔ∏è';
        } else if (objective.type === 'resource') {
            return 'üì¶';
        } else if (objective.type === 'reach') {
            return 'üìà';
        }

        return 'üéØ';
    }

    /**
     * Gets mission urgency information
     */
    getMissionUrgency(mission) {
        if (!mission) return { level: 'none', text: '' };

        // Check for explicit urgency
        if (mission.urgency === 'high' || mission.urgency === 'critical') {
            return {
                level: mission.urgency,
                text: mission.urgency === 'critical' ? 'CR√çTICA' : 'URGENTE'
            };
        }

        // Check for time windows
        if (mission.timeWindow && mission.status === 'available') {
            const timeLeft = mission.timeWindow.end - Date.now();
            const hoursLeft = Math.ceil(timeLeft / (1000 * 60 * 60));

            if (hoursLeft <= 2) {
                return { level: 'critical', text: 'CR√çTICA' };
            } else if (hoursLeft <= 6) {
                return { level: 'high', text: 'URGENTE' };
            } else if (hoursLeft <= 24) {
                return { level: 'medium', text: 'MODERADA' };
            }
        }

        // Check mission type
        if (mission.type === 'primary') {
            return { level: 'medium', text: 'IMPORTANTE' };
        }

        return { level: 'low', text: 'NORMAL' };
    }

    /**
     * Handles click on current objective display
     */
    focusOnCurrentObjective() {
        if (!this.currentDisplayMission) {
            // No current mission, open mission interface
            this.openMissionInterface();
            return;
        }

        const mission = this.currentDisplayMission;
        const currentObjective = this.getCurrentObjective(mission);

        if (!currentObjective) {
            // Show mission details
            this.showMissionDetails(mission.id);
            return;
        }

        // Handle different objective types
        if (currentObjective.type === 'build') {
            // Open building panel for the required building type
            if (currentObjective.buildingType && window.gameManager.uiManager) {
                // Try to open the appropriate building category
                this.openBuildingCategory(currentObjective.buildingType);
            } else {
                // Fallback to mission details
                this.showMissionDetails(mission.id);
            }
        } else {
            // For other types, show mission details
            this.showMissionDetails(mission.id);
        }
    }

    /**
     * Opens the appropriate building category for an objective
     */
    openBuildingCategory(buildingType) {
        // Map building types to UI categories
        const categoryMap = {
            'water_pump': 'water',
            'well': 'water',
            'desalination_plant': 'water',
            'rain_garden': 'water',
            'floating_garden': 'water',
            'monitoring_station': 'water',
            'quality_monitor': 'water',
            'treatment_plant': 'treatment',
            'reservoir': 'storage',
            'water_tower': 'storage'
        };

        const category = categoryMap[buildingType] || 'water';

        // Trigger building category selection
        if (window.gameManager.uiManager && window.gameManager.uiManager.selectBuildingCategory) {
            window.gameManager.uiManager.selectBuildingCategory(category);
        }
    }

    /**
     * Gets related info cards for a mission based on its simplified category
     * Returns simplified categories that match the mission's category (primary/secondary)
     */
    getRelatedInfoCards(mission) {
        // For simplified mission interface, return the mission's category as a related card
        // This ensures consistency with the simplified 2-category system
        if (mission.category === 'primary') {
            return ['primary'];
        } else if (mission.category === 'secondary') {
            return ['secondary'];
        }

        // Fallback: if mission doesn't have a category, return empty array
        return [];
    }

    // ===== ENHANCED UI SYNCHRONIZATION =====
    updateQuestUI() {
        this.updateMissionInfoPanel();
        this.updateMissionProgressDisplay();

        // Update mission interface if it's open
        if (this.missionUI.isOpen) {
            this.renderMissionInterface();
        }
    }

    /**
     * Updates the enhanced mission-info panel in the sidebar
     */
    updateMissionInfoPanel() {
        const currentMissionElement = document.getElementById('current-mission');
        const progressTextElement = document.querySelector('.mission-info .progress-text');
        const objectiveActionElement = document.getElementById('objective-action');
        const objectiveIconElement = document.getElementById('objective-icon');
        const objectiveStatusElement = document.getElementById('objective-status');
        const missionUrgencyElement = document.getElementById('mission-urgency');
        const progressFillElement = document.getElementById('mission-progress');

        if (!currentMissionElement) return;

        // Find the most relevant active mission to display
        let displayMission = null;

        // Priority 1: Current main quest
        if (this.currentMainQuest && this.activeQuests.has(this.currentMainQuest)) {
            displayMission = this.quests.get(this.currentMainQuest);
        }

        // Priority 2: Any active primary mission
        if (!displayMission) {
            for (const questId of this.activeQuests) {
                const quest = this.quests.get(questId);
                if (quest && quest.type === 'primary') {
                    displayMission = quest;
                    break;
                }
            }
        }

        // Priority 3: Any active mission
        if (!displayMission && this.activeQuests.size > 0) {
            const firstActiveId = this.activeQuests.values().next().value;
            displayMission = this.quests.get(firstActiveId);
        }

        // Update the display
        if (displayMission) {
            // Get the most important current objective
            const currentObjective = this.getCurrentObjective(displayMission);

            if (currentObjective) {
                // Update objective title with actionable text
                currentMissionElement.textContent = this.getActionableObjectiveText(currentObjective, displayMission);

                // Update action text
                if (objectiveActionElement) {
                    objectiveActionElement.textContent = this.getObjectiveActionText(currentObjective, displayMission);
                }

                // Update objective icon based on type
                if (objectiveIconElement) {
                    objectiveIconElement.textContent = this.getObjectiveIcon(currentObjective, displayMission);
                }
            } else {
                currentMissionElement.textContent = displayMission.description;
                if (objectiveActionElement) {
                    objectiveActionElement.textContent = 'Clique para ver detalhes';
                }
                if (objectiveIconElement) {
                    objectiveIconElement.textContent = 'üéØ';
                }
            }

            // Update progress
            const completedObjectives = displayMission.objectives.filter(obj => obj.current >= obj.required).length;
            const totalObjectives = displayMission.objectives.length;
            const progressPercent = totalObjectives > 0 ? (completedObjectives / totalObjectives) * 100 : 0;

            if (progressTextElement) {
                progressTextElement.textContent = `${completedObjectives}/${totalObjectives}`;
            }

            if (progressFillElement) {
                progressFillElement.style.width = `${progressPercent}%`;
            }

            // Update urgency indicator
            if (missionUrgencyElement) {
                const urgency = this.getMissionUrgency(displayMission);
                missionUrgencyElement.textContent = urgency.text;
                missionUrgencyElement.className = `mission-urgency ${urgency.level}`;
                missionUrgencyElement.style.display = urgency.level !== 'none' ? 'block' : 'none';
            }

            // Store current mission for click handler
            this.currentDisplayMission = displayMission;
        } else {
            currentMissionElement.textContent = 'Nenhuma miss√£o ativa';
            if (progressTextElement) {
                progressTextElement.textContent = '0/0';
            }
            if (objectiveActionElement) {
                objectiveActionElement.textContent = 'Inicie uma miss√£o';
            }
            if (objectiveIconElement) {
                objectiveIconElement.textContent = 'üìã';
            }
            if (progressFillElement) {
                progressFillElement.style.width = '0%';
            }
            if (missionUrgencyElement) {
                missionUrgencyElement.style.display = 'none';
            }
            this.currentDisplayMission = null;
        }
    }

    /**
     * Updates the mission progress bar
     */
    updateMissionProgressDisplay() {
        const missionProgressElement = document.getElementById('mission-progress');
        if (!missionProgressElement) return;

        // Find the mission to display (same logic as above)
        let displayMission = null;

        if (this.currentMainQuest && this.activeQuests.has(this.currentMainQuest)) {
            displayMission = this.quests.get(this.currentMainQuest);
        } else if (this.activeQuests.size > 0) {
            // Find first active primary mission, or any active mission
            for (const questId of this.activeQuests) {
                const quest = this.quests.get(questId);
                if (quest && quest.type === 'primary') {
                    displayMission = quest;
                    break;
                }
            }

            if (!displayMission) {
                const firstActiveId = this.activeQuests.values().next().value;
                displayMission = this.quests.get(firstActiveId);
            }
        }

        if (displayMission) {
            const progressPercent = this.calculateMissionProgress(displayMission);
            missionProgressElement.style.width = `${progressPercent}%`;
        } else {
            missionProgressElement.style.width = '0%';
        }
    }

    /**
     * Calculates mission progress percentage
     */
    calculateMissionProgress(mission) {
        if (!mission || !mission.objectives || mission.objectives.length === 0) {
            return 0;
        }

        const totalObjectives = mission.objectives.length;
        const completedObjectives = mission.objectives.filter(obj => obj.current >= obj.required).length;

        return Math.round((completedObjectives / totalObjectives) * 100);
    }

    /**
     * Renders prerequisite information for a mission
     */
    renderPrerequisites(mission) {
        if (!mission.prerequisites || mission.prerequisites.length === 0) {
            return '';
        }

        const prerequisiteInfo = mission.prerequisites.map(prereqId => {
            const prereqMission = this.quests.get(prereqId);
            const isCompleted = this.completedQuests.has(prereqId);

            if (prereqMission) {
                return {
                    title: prereqMission.title,
                    completed: isCompleted,
                    id: prereqId
                };
            } else {
                return {
                    title: prereqId,
                    completed: isCompleted,
                    id: prereqId
                };
            }
        });

        const allCompleted = prerequisiteInfo.every(prereq => prereq.completed);
        const statusClass = allCompleted ? 'prerequisites-met' : 'prerequisites-pending';

        return `
            <div class="mission-prerequisites ${statusClass}">
                <div class="prerequisites-header">
                    <span class="meta-label">Pr√©-requisitos:</span>
                    <span class="prerequisites-status">
                        ${allCompleted ? '‚úÖ Completos' : '‚è≥ Pendentes'}
                    </span>
                </div>
                <div class="prerequisites-list">
                    ${prerequisiteInfo.map(prereq => `
                        <div class="prerequisite-item ${prereq.completed ? 'completed' : 'pending'}">
                            <span class="prerequisite-icon">${prereq.completed ? '‚úÖ' : '‚è≥'}</span>
                            <span class="prerequisite-title">${prereq.title}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    // ===== MISSION MANAGEMENT HELPERS =====

    /**
     * Gets missions by category - now simplified to only primary/secondary
     */
    getMissionsByCategory(category) {
        return Array.from(this.quests.values()).filter(mission => {
            // Filter by the simplified category system
            return mission.category === category;
        });
    }

    /**
     * Selects a mission category
     */
    selectCategory(category) {
        this.missionUI.currentCategory = category;
        this.renderMissionInterface();
    }

    /**
     * Selects a specific mission
     */
    selectMission(missionId) {
        this.missionUI.selectedMission = missionId;
        // Could expand to show detailed mission view
    }

    /**
     * Starts a mission from the UI
     */
    startMission(missionId) {
        if (this.startQuest(missionId)) {
            this.renderMissionInterface();

            if (this.gameManager.uiManager) {
                this.gameManager.uiManager.showNotification(
                    `Miss√£o iniciada: ${this.quests.get(missionId).title}`,
                    'info'
                );
            }
        }
    }

    /**
     * Shows detailed mission information
     */
    showMissionDetails(missionId) {
        const mission = this.quests.get(missionId);
        if (!mission) return;

        const detailsContent = document.getElementById('details-content');
        if (!detailsContent) return;

        const category = this.missionCategories[mission.category];
        const isActive = this.activeQuests.has(missionId);
        const isCompleted = this.completedQuests.has(missionId);

        const content = `
            <div class="mission-details">
                <div class="mission-details-header">
                    <button class="back-btn" onclick="window.gameManager.questSystem.renderMissionInterface()">‚Üê Voltar</button>
                    <h3>${mission.title}</h3>
                </div>

                <div class="mission-info">
                    <div class="mission-category">
                        <span class="category-icon" style="color: ${category.color}">${category.icon}</span>
                        <span>${category.name}</span>
                    </div>
                    <div class="mission-difficulty">Dificuldade: ${this.getDifficultyText(mission.difficulty)}</div>
                    <div class="mission-time">Tempo estimado: ${mission.estimatedTime || 'Vari√°vel'}</div>
                </div>

                <div class="mission-description">
                    <h4>Descri√ß√£o</h4>
                    <p>${mission.description}</p>
                </div>

                <div class="mission-objectives">
                    <h4>Objetivos</h4>
                    ${mission.objectives.map(obj => `
                        <div class="objective-item">
                            <span class="objective-icon">${obj.current >= obj.required ? '‚úÖ' : '‚è≥'}</span>
                            <span class="objective-text">${obj.description}</span>
                            <span class="objective-progress">${obj.current}/${obj.required}</span>
                        </div>
                    `).join('')}
                </div>

                <div class="mission-rewards">
                    <h4>Recompensas</h4>
                    <div class="rewards-list">
                        ${mission.rewards.score ? `<div class="reward-item">üèÜ ${mission.rewards.score} pontos</div>` : ''}
                        ${mission.rewards.budget ? `<div class="reward-item">üí∞ R$ ${mission.rewards.budget}</div>` : ''}
                        ${mission.rewards.experience ? `<div class="reward-item">‚≠ê ${mission.rewards.experience} XP</div>` : ''}
                        ${mission.rewards.unlock ? `<div class="reward-item">üîì Desbloqueios: ${mission.rewards.unlock.join(', ')}</div>` : ''}
                    </div>
                </div>

                ${mission.educationalContent ? `
                    <div class="educational-content">
                        <h4>Conte√∫do Educacional</h4>

                        ${mission.educationalContent.concepts ? `
                            <div class="concepts">
                                <h5>Conceitos Abordados:</h5>
                                <div class="concept-tags">
                                    ${mission.educationalContent.concepts.map(concept =>
                                        `<span class="concept-tag">${concept}</span>`
                                    ).join('')}
                                </div>
                            </div>
                        ` : ''}

                        <div class="facts">
                            <h5>Fatos Interessantes:</h5>
                            <ul>
                                ${mission.educationalContent.facts.map(fact => `<li>${fact}</li>`).join('')}
                            </ul>
                        </div>

                        <div class="tips">
                            <h5>Dicas:</h5>
                            <ul>
                                ${mission.educationalContent.tips.map(tip => `<li>${tip}</li>`).join('')}
                            </ul>
                        </div>
                    </div>
                ` : ''}

                <div class="mission-actions">
                    ${!isCompleted && !isActive && this.canStartMission(missionId) ?
                        `<button class="mission-btn start" onclick="window.gameManager.questSystem.startMission('${missionId}')">‚ñ∂Ô∏è Iniciar Miss√£o</button>` :
                        ''
                    }
                </div>
            </div>
        `;

        detailsContent.innerHTML = content;
    }

    /**
     * Checks if a mission can be started
     */
    canStartMission(missionId) {
        const mission = this.quests.get(missionId);
        if (!mission || mission.status !== 'available') return false;

        // Check prerequisites
        if (mission.prerequisites && mission.prerequisites.length > 0) {
            const prerequisitesMet = mission.prerequisites.every(prereq => this.completedQuests.has(prereq));
            if (!prerequisitesMet) {
                console.log(`üîí Mission ${mission.title} blocked by prerequisites:`,
                    mission.prerequisites.filter(prereq => !this.completedQuests.has(prereq)));
                return false;
            }
        }

        return true;
    }

    /**
     * Validates mission completion logic
     */
    validateMissionCompletion(missionId) {
        const mission = this.quests.get(missionId);
        if (!mission) {
            console.error(`‚ùå Mission validation failed: Mission ${missionId} not found`);
            return false;
        }

        console.log(`üîç Validating mission completion: ${mission.title}`);

        // Check each objective
        let allObjectivesComplete = true;
        mission.objectives.forEach((objective, index) => {
            const progress = this.checkObjectiveProgress(objective);
            const isComplete = progress >= objective.required;

            console.log(`  üìã Objective ${index + 1}: ${objective.description}`);
            console.log(`     Progress: ${progress}/${objective.required} ${isComplete ? '‚úÖ' : '‚è≥'}`);

            if (!isComplete) {
                allObjectivesComplete = false;
            }
        });

        console.log(`üéØ Mission ${mission.title} completion status: ${allObjectivesComplete ? '‚úÖ Complete' : '‚è≥ In Progress'}`);
        return allObjectivesComplete;
    }

    /**
     * Forces mission completion for testing purposes
     */
    forceCompleteMission(missionId) {
        const mission = this.quests.get(missionId);
        if (!mission) {
            console.error(`‚ùå Cannot force complete: Mission ${missionId} not found`);
            return false;
        }

        console.log(`üß™ Force completing mission: ${mission.title}`);

        // Complete all objectives
        mission.objectives.forEach(objective => {
            objective.current = objective.required;
        });

        // Complete the mission
        this.completeQuest(missionId);
        return true;
    }

    /**
     * Gets difficulty text
     */
    getDifficultyText(difficulty) {
        const difficultyMap = {
            'beginner': 'Iniciante',
            'intermediate': 'Intermedi√°rio',
            'advanced': 'Avan√ßado',
            'expert': 'Especialista'
        };
        return difficultyMap[difficulty] || 'Desconhecido';
    }

    // ===== GETTERS =====
    getActiveQuests() {
        return Array.from(this.activeQuests).map(id => this.quests.get(id));
    }

    getCompletedQuests() {
        return Array.from(this.completedQuests).map(id => this.quests.get(id));
    }
    
    getCurrentMainQuest() {
        return this.currentMainQuest ? this.quests.get(this.currentMainQuest) : null;
    }
    
    getTotalScore() {
        return this.totalScore;
    }
    
    getAchievements() {
        return Array.from(this.achievements);
    }
    
    // ===== SAVE/LOAD =====
    getSaveData() {
        return {
            activeQuests: Array.from(this.activeQuests),
            completedQuests: Array.from(this.completedQuests),
            currentMainQuest: this.currentMainQuest,
            totalScore: this.totalScore,
            achievements: Array.from(this.achievements),
            questStates: Array.from(this.quests.entries()).map(([id, quest]) => ({
                id,
                status: quest.status,
                startTime: quest.startTime,
                completionTime: quest.completionTime,
                progress: quest.progress
            }))
        };
    }
    
    loadData(data) {
        if (data) {
            this.activeQuests = new Set(data.activeQuests || []);
            this.completedQuests = new Set(data.completedQuests || []);
            this.currentMainQuest = data.currentMainQuest;
            this.totalScore = data.totalScore || 0;
            this.achievements = new Set(data.achievements || []);
            
            // Restaurar estados das miss√µes
            if (data.questStates) {
                data.questStates.forEach(state => {
                    const quest = this.quests.get(state.id);
                    if (quest) {
                        quest.status = state.status;
                        quest.startTime = state.startTime;
                        quest.completionTime = state.completionTime;
                        quest.progress = state.progress;
                    }
                });
            }
        }
    }
}

// Exportar para escopo global
window.QuestSystem = QuestSystem;
console.log('üéØ QuestSystem carregado e exportado para window.QuestSystem');
